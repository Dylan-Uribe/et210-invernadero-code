#include <EEPROM.h>
//////////
#include <Keypad.h>     // importa libreria Keypad
const byte FILAS = 4;     // define numero de filas
const byte COLUMNAS = 4;    // define numero de columnas
char keys[FILAS][COLUMNAS] = {    // define la distribucion de teclas
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*', '0','#','D'},
};

byte pinesFilas[FILAS] = {23,25,27,29};   // pines correspondientes a las filas
byte pinesColumnas[COLUMNAS] = {31,33,35,37}; // pines correspondientes a las columnas

int Bomba=2, Ventilador=3,LED=5;
int parametro_ventilador=25,parametro_LED=25;

Keypad teclado = Keypad(makeKeymap(keys), pinesFilas, pinesColumnas, FILAS, COLUMNAS);  // crea objeto

char tecla;       // almacena la tecla presionada

////////////////////////////////////////////////////////

#include <Adafruit_GFX.h>   // libreria para pantallas graficas
#include <Adafruit_SSD1306.h>   // libreria para controlador SSD1306 
#define ANCHO 128     // reemplaza ocurrencia de ANCHO por 128
#define ALTO 64       // reemplaza ocurrencia de ALTO por 64
#define OLED_RESET 4      // necesario por la libreria pero no usado
Adafruit_SSD1306 oled(ANCHO, ALTO, &Wire, OLED_RESET);  // crea objeto

/////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////

#include <Wire.h>   // incluye libreria para interfaz I2C
#include <RTClib.h>   // incluye libreria para el manejo del modulo RTC

RTC_DS3231 rtc;     // crea objeto del tipo RTC_DS3231

///////////////////////////////////////////////////////////////

#include <Adafruit_Sensor.h>
#include "DHT.h"
#define DHTPIN 10     //Digital pin cpnnected to the DHT sensor

// Uncomment the type of sensor in use:
#define DHTTYPE DHT11 //DHT11
//#define DHTTYPE DHT 22 // DHT 22  (AM2302)
//#define DHTTYPE DHT 21 // DHT 21 (AM2301)

DHT dht(DHTPIN, DHTTYPE);

////////////////////////////

//

int potenciometro_pin = A1;    // select the input pin for the potentiometer

int velocidad = 0;  // variable to store the value coming from the sensor

int humedadSuelo;

//Variables
int address = 0; // direccion en la eeprom
int val;
int limite = 1000; // cantidad de direcciones a utilizar
int date = 1;
int contador = 0;
int a = 0;
int b = 1;
int c = 2;
int d = 3;
int e = 4;
int f = 5;
int g = 6;
int evento = 1;
int x = 0;
int y = 0;
int z = 0;

//HORA
const char* hora[4] = {"/", " " " ", ":", " %"};

//DATOS
const char* datos[3] = {"1. Temp: ", "2. Humedad: ", "3. Humed.suelo: "};

//VECTOR MENU PRINCIPAL
const char* mP[2] = {"1. Mostrar", "2. Personalizar"};

//VECTOR PERSONALIZAR
const char* p[3] = {"1. Bomba de Agua", "2. Leds, Ventiladores", "3. Luces leds"};

//VECTOR PANTALLA GENERAL
const char* varPanGeneral[1] = {"pantalla general: "};

//VECTOR ESTADO PANTALLA
const char* varEstPantalla[1] = {"estado pantalla: "};

//VARIABLES DE PANTALLA Y NAVEGACIÓN

//ESTADO DE PANTALLA NOS AYUDARÁ A VER EN QUE POSICIÓN ESTAMOS AL MOVER EL MENÚ PRINCIPAL CON A y B
//ESTADO DE PANTALLA GENERAL NOS AYUDARÁ A SABER EN QUE POSICIÓN DE NAVEGACIÓN ESTAMOS AL USAR EL MENÚ ENTERO

 int estadoPantalla = 0;
 int estadoPantallaGeneral = 0;

 //LAS VARIABLES BOOLEANAS sM1 y sM2 SE VOLVERÁN "TRUE" CUANDO ACCEDAMOS A SUS RESPECTIVAS ACCIONES. ESTO NOS SERVIRÁ A IDENTIFICAR CUANDO ENTRAMOS Y SALIMOS DE SUS OPCIONES
 bool sM1 = false;
 bool sM2 = false;
 bool sM3 = false;

 //b0oleanos
 bool bomb = false;
 bool vent_lights = false;
 bool def = false;
 bool show_R = false;
 bool del_R = false;

 // variables
int parametro_bombaMIN=25;
int parametro_bombaMAX=50;


//SUBMENUS DE LA FUNCIÓN MOSTRAR

void subMostrar1(){

    delay(500);

    float t = dht.readTemperature();
    float h = dht.readHumidity();
    humedadSuelo=analogRead(A0);
    int valor_suel=(100.*humedadSuelo)/1024.;
   
  
    oled.clearDisplay();
    oled.setCursor(0, 0);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(datos[0]);
    oled.setTextSize(1);
    oled.setCursor(50,0);
    oled.print(t);
    oled.print(hora[1]);
    oled.setTextSize(1);
    oled.cp437(true);
    oled.write(167);
    oled.setTextSize(1);
    oled.print("C");
    
     oled.setCursor(0, 20);     // ubica cursor en inicio de coordenadas 0,0
     oled.setTextSize(1);      // establece tamano de texto en 1
     oled.print(datos[1]);
     oled.setTextSize(1);
     oled.setCursor(70, 20);
     oled.print(h);
     oled.print(hora[3]);

     oled.setCursor(0, 40);     // ubica cursor en inicio de coordenadas 0,0
     oled.setTextSize(1);      // establece tamano de texto en 1
     oled.print(datos[2]);
     oled.setTextSize(1);
     oled.setCursor(93, 40);
     oled.print(valor_suel);
     oled.print(hora[3]);

    //Colocamos el estado donde está la pantalla
    // oled.setCursor(0,47);     // ubica cursor en inicio de coordenadas 0,0
    // oled.setTextSize(1);      // establece tamano de texto en 1
    // oled.print(varEstPantalla[0]);
    // oled.setCursor(100,47);
    // oled.setTextSize(1); 
    // oled.print(estadoPantalla);

    //De las 3 posiblidades de las pantallas
  //   oled.setCursor(0,56);     // ubica cursor en inicio de coordenadas 0,0
  //   oled.setTextSize(1);      // establece tamano de texto en 1
  //   oled.print(varPanGeneral[0]);
  //   oled.setCursor(100,56);
  //  oled.setTextSize(1); 
  //   oled.print(estadoPantallaGeneral);
  //   oled.setTextColor(WHITE);
    
    oled.display();
}



void menuPersonalizar(){

  oled.clearDisplay();
  oled.setCursor(0, 10);     // ubica cursor en inicio de coordenadas 0,0
  oled.setTextSize(1);      // establece tamano de texto en 1
  oled.print(p[0]);

  oled.setCursor(0, 25);     // ubica cursor en inicio de coordenadas 0,0
  oled.setTextSize(1);      // establece tamano de texto en 1
  oled.print(p[1]);

  oled.setCursor(0, 40);     // ubica cursor en inicio de coordenadas 0,0
  oled.setTextSize(1);      // establece tamano de texto en 1
  oled.print("3. Datos por default");

  oled.display();

}

void personalizarBombaAgua(){

    velocidad = analogRead(potenciometro_pin); 
    velocidad = map(velocidad,0,1023,0,100);

    oled.clearDisplay();
    oled.setCursor(0, 0);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print("Nivel de humedad: ");
    oled.setTextSize(1);
    oled.setCursor(0,15);
    oled.print(velocidad);
    oled.setCursor(0, 55);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print("min: ");
    oled.setCursor(30, 55);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(parametro_bombaMIN);
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.setCursor(60, 55);     // ubica cursor en inicio de coordenadas 0,0
    oled.print("max: ");
    oled.setCursor(90, 55);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(parametro_bombaMAX);
    oled.display();

    if(tecla){
    switch(tecla){

      case '*':

      if(velocidad >= parametro_bombaMAX){
        oled.clearDisplay();
        oled.setCursor(0,0);
        oled.setTextSize(2);
        oled.print("!!ERROR!!");
        oled.setCursor(0,30);
        oled.setTextSize(1);
        oled.print("El minimo no puede   ser mayor al maximo");
        oled.display();
        delay(2000);
      }
      else{
      parametro_bombaMIN=velocidad;
      oled.setCursor(0, 30); 
      oled.setTextSize(1); 
      oled.print("Valor minimo: ");
      oled.setCursor(0, 45); 
      oled.setTextSize(1); 
      oled.print(parametro_bombaMIN);
      oled.display();
      delay(2000);
      }
      
      
      break;

      case '#':

      if(velocidad <= parametro_bombaMIN){
        oled.clearDisplay();
        oled.setCursor(0,0);
        oled.setTextSize(2);
        oled.print("!!ERROR!!");
        oled.setCursor(0,30);
        oled.setTextSize(1);
        oled.print("El maximo no puede   ser menor al minimo");
        oled.display();
        delay(2000);
      }
      else{
        parametro_bombaMAX=velocidad;
      oled.setCursor(0, 30); 
      oled.setTextSize(1); 
      oled.print("Valor maximo: ");
      oled.setCursor(0, 45); 
      oled.setTextSize(1); 
      oled.print(parametro_bombaMAX);
      oled.display();
      delay(2000);
      }
      
      break;

      default:
      break;
    }
   }

}
void personalizarVentiladores_y_Leds(){

    velocidad = analogRead(potenciometro_pin); 
    velocidad = map(velocidad,0,1023,0,50);

    oled.clearDisplay();
    oled.setCursor(0, 0);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print("temperatura: ");
    oled.setTextSize(1);
    oled.setCursor(0,15);
    oled.print(velocidad);
    oled.setCursor(0,55);
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print("min: ");
    oled.setCursor(30, 55);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(parametro_LED);
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.setCursor(60, 55);     // ubica cursor en inicio de coordenadas 0,0
    oled.print("max: ");
    oled.setCursor(90, 55);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(parametro_ventilador);
    oled.display();

    if(tecla){
    switch(tecla){

      case '*':

      if(velocidad > parametro_ventilador){
        oled.clearDisplay();
        oled.setCursor(0,0);
        oled.setTextSize(2);
        oled.print("!!ERROR!!");
        oled.setCursor(0,30);
        oled.setTextSize(1);
        oled.print("El minimo no puede   ser mayor al maximo");
        oled.display();
        delay(2000);
      }
      else{
        parametro_LED=velocidad;
      oled.setCursor(0, 30); 
      oled.setTextSize(1); 
      oled.print("Valor minimo: ");
      oled.setCursor(0, 45); 
      oled.setTextSize(1); 
      oled.print(parametro_LED);
      oled.display();
      delay(2000);
      }
      
      
      break;

      case '#':

      if(velocidad < parametro_LED){
        oled.clearDisplay();
        oled.setCursor(0,0);
        oled.setTextSize(2);
        oled.print("!!ERROR!!");
        oled.setCursor(0,30);
        oled.setTextSize(1);
        oled.print("El maximo no puede   ser menor al minimo");
        oled.display();
        delay(2000);
      }
      else{
        parametro_ventilador=velocidad;
      oled.setCursor(0, 30); 
      oled.setTextSize(1); 
      oled.print("Valor max: ");
      oled.setCursor(0, 45); 
      oled.setTextSize(1); 
      oled.print(parametro_ventilador);
      oled.display();
      delay(2000);
      }

      
     
      break;

      default:
      break;
    }
   }
 }

 void menuDef(){
    oled.clearDisplay();
    oled.setCursor(0, 0);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print("Bomba de Agua ");
    oled.setCursor(0,15);
    oled.setTextSize(1);
    oled.print("min: ");
    oled.setCursor(30, 15);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(parametro_bombaMIN);
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.setCursor(50, 15);     // ubica cursor en inicio de coordenadas 0,0
    oled.print("max: ");
    oled.setCursor(80, 15);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(parametro_bombaMAX);

    oled.setCursor(0, 30);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print("Leds, ventiladores ");
    oled.setCursor(0,45);
    oled.setTextSize(1);
    oled.print("min: ");
    oled.setCursor(30, 45);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(parametro_LED);
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.setCursor(50, 45);     // ubica cursor en inicio de coordenadas 0,0
    oled.print("max: ");
    oled.setCursor(80, 45);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(parametro_ventilador);

    
    oled.display();
    
    
 }

 void menuRegistros(){

  oled.clearDisplay();
  oled.setCursor(0, 15);     // ubica cursor en inicio de coordenadas 0,0
  oled.setTextSize(1);      // establece tamano de texto en 1
  oled.print("1. Mostrar Registros");
    
  oled.setCursor(0, 35);     // ubica cursor en inicio de coordenadas 0,0
  oled.setTextSize(1);      // establece tamano de texto en 1
  oled.print("2. Borrar Registros");
  oled.display();
}

void menuPrincipal(){

  DateTime fecha = rtc.now();      // funcion que devuelve fecha y horario en formato
            // DateTime y asigna a variable fecha
    //Hora
    oled.clearDisplay();
    oled.setCursor(0, 0);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(fecha.day());     // funcion que obtiene el dia de la fecha completa
    oled.print(hora[0]);       // caracter barra como separador
    oled.print(fecha.month());     // funcion que obtiene el mes de la fecha completa
    oled.print(hora[0]);       // caracter barra como separador
    oled.print(fecha.year());      // funcion que obtiene el año de la fecha completa
    oled.print(hora[1]);       // caracter espacio en blanco como separador
    oled.print(fecha.hour());      // funcion que obtiene la hora de la fecha completa
    oled.print(hora[2]);       // caracter dos puntos como separador
    oled.print(fecha.minute());      // funcion que obtiene los minutos de la fecha completa
    oled.print(hora[2]);       // caracter dos puntos como separador
    oled.println(fecha.second());    // funcion que obtiene los segundos de la fecha completa

    //Menu
    oled.setCursor(0, 15);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(mP[0]);
    
    oled.setCursor(0, 30);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print(mP[1]);

    oled.setCursor(0, 45);     // ubica cursor en inicio de coordenadas 0,0
    oled.setTextSize(1);      // establece tamano de texto en 1
    oled.print("3. Registros");
    

    //Colocamos el estado donde está la pantalla
    // oled.setCursor(0,47);     // ubica cursor en inicio de coordenadas 0,0
    // oled.setTextSize(1);      // establece tamano de texto en 1
    // oled.print(varEstPantalla[0]);
    // oled.setCursor(100,47);
    // oled.setTextSize(1); 
    // oled.print(estadoPantalla);
    

    //De las 3 posiblidades de las pantallas
    // oled.setCursor(0,56);     // ubica cursor en inicio de coordenadas 0,0
    // oled.setTextSize(1);      // establece tamano de texto en 1
    // oled.print(varPanGeneral[0]);
    // oled.setCursor(100,56);
    // oled.setTextSize(1); 
    // oled.print(estadoPantallaGeneral);
     oled.display(); 
  
}

String convertir(int j){

  String name;

  switch(j){
    case 1:
    name = "Bomba de Agua: ON";
    break;

    case 2:
    name = "Ventiladores: ON";
    break;

    case 3:
    name = "Luces Leds: ON";
    break;

    default:
    break;
  }

  return name;
}

void MostrandoRegistros(){

    if(contador == 0){
          oled.clearDisplay();
          oled.setCursor(15, 30);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print("No hay registros");
          oled.display();
        }
        else{
          oled.clearDisplay();
          oled.setCursor(0, 0);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print("Evento # ");
          oled.setCursor(55, 0);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print(evento);
          oled.setCursor(0, 15);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print("fecha: ");
          oled.setCursor(40, 15);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print((EEPROM.read(a)));
          oled.setCursor(55, 15);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print("-");
          oled.setCursor(65, 15);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print((EEPROM.read(b)));
          oled.setCursor(80, 15);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print("-");
          oled.setCursor(90, 15);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print(2023);

          oled.setCursor(0, 30);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);
          oled.print("hora: ");
          oled.setCursor(40, 30);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print((EEPROM.read(d)));
          oled.setCursor(55, 30);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print(":");
          oled.setCursor(65, 30);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print((EEPROM.read(e)));
          oled.setCursor(80, 30);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print(":");
          oled.setCursor(90, 30);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print((EEPROM.read(f)));
          oled.setCursor(0, 45);     // ubica cursor en inicio de coordenadas 0,0
          oled.setTextSize(1);      // establece tamano de texto en 1
          oled.print(convertir((EEPROM.read(g))));
          oled.display();
        }
}

void guardarDatos(int p){
  
  DateTime fecha = rtc.now();
  contador++;
                Serial.print(date);
                Serial.print("\t");

                val = fecha.day();
                EEPROM.update(address, val); // guarda val en la direccion address
                Serial.print(val); Serial.print("/");
                address++;

                val = fecha.month();
                EEPROM.update(address, val); // guarda val en la direccion address
                Serial.print(val); Serial.print("/");
                address++;

                val = fecha.year();
                EEPROM.update(address, val); // guarda val en la direccion address
                Serial.print(val); Serial.print("\t");
                address++;

                val = fecha.hour();
                EEPROM.update(address, val); // guarda val en la direccion address
                Serial.print(val); Serial.print(":");
                address++;

                val = fecha.minute();
                EEPROM.update(address, val); // guarda val en la direccion address
                Serial.print(val); Serial.print(":");
                address++;

                val = fecha.second();
                EEPROM.update(address, val); // guarda val en la direccion address
                Serial.print(val);
                address++;

                EEPROM.update(address, p); // guarda val en la direccion address
                address++;
                date++;
}

void setup() {
  pinMode(Bomba,OUTPUT);
  pinMode(Ventilador,OUTPUT);
  pinMode(LED,OUTPUT);
  //Sensor de temperatura
  dht.begin();

  //Pantalla Oled
  
  Serial.begin(9600);
  Wire.begin();         // inicializa bus I2C
  oled.begin(SSD1306_SWITCHCAPVCC, 0x3C); // inicializa pantalla con direccion 0x3C
  oled.clearDisplay();
  oled.display();
  oled.setTextColor(WHITE);

//Modulo de Reloj

  if (! rtc.begin()) {       // si falla la inicializacion del modulo
 Serial.println("Modulo RTC no encontrado !");  // muestra mensaje de error
 while (1);         // bucle infinito que detiene ejecucion del programa
 }
 //rtc.adjust(DateTime(2021, 3, 30, 12, 45, 0));  // (__DATE__, __TIME__) funcion que permite establecer fecha y horario
 rtc.adjust(DateTime(__DATE__, __TIME__));           // al momento de la compilacion. Comentar esta linea

}

void loop() {

  DateTime fecha = rtc.now();
   
  tecla = teclado.getKey();   // obtiene tecla presionada y asigna a variable


if (estadoPantallaGeneral == 2){
   if(bomb){
     personalizarBombaAgua();
   }
   else if(vent_lights){
     personalizarVentiladores_y_Leds();
   }
   else if (def){
     parametro_bombaMIN=25;
     parametro_bombaMAX=50;
     parametro_ventilador=25;
     parametro_LED=25;
     menuDef();
   }
   else if(show_R){
    MostrandoRegistros();

    if (evento != contador){
          if(tecla){
            switch(tecla){
                case 'B':
                a = a + 7;
                b = b + 7;
                c = c + 7;
                d = d + 7;
                e = e + 7;
                f = f + 7;
                g = g + 7;
                evento++;
                break;
            }
          }
        }

        if (evento != 1){
          if(tecla){
            switch(tecla){
                case 'A':
                a = a - 7;
                b = b - 7;
                c = c - 7;
                d = d - 7;
                e = e - 7;
                f = f - 7;
                g = g - 7;
                evento--;
                break;
            }
          }
        }

   }
 }

 if (sM1){

   if (estadoPantallaGeneral == 1 ){

   if(estadoPantalla == 0){
     subMostrar1();
   }

  }

 }

   if (sM2){
   
   if (estadoPantallaGeneral == 1){
     menuPersonalizar();

     if (tecla){
    switch(tecla){
      case '1':
      estadoPantallaGeneral++;
      bomb = true;
      vent_lights = false;
      def = false;
      break;

      case '2':
      estadoPantallaGeneral++;
      bomb = false;
      vent_lights = true;
      def = false;
      break;

      case '3':
      estadoPantallaGeneral++;
      bomb = false;
      vent_lights = false;
      def = true;
      break;

      default:
      break;
    }
  }

     
   }


 }

  if (sM3){

   if (estadoPantallaGeneral == 1 ){
     menuRegistros();

     if (tecla){
       switch(tecla){
         case '1':
         estadoPantallaGeneral++;
         show_R = true;
         break;

         case '2':
         show_R = false;

         oled.clearDisplay();
         oled.setCursor(0, 15);
         oled.setTextSize(1);      
         oled.print("Inicio de borrado");
         oled.display();

         for (address=0; address < limite; address++){
             EEPROM.write(address, 0);
         }
         oled.setCursor(0, 35);     // ubica cursor en inicio de coordenadas 0,0 
         oled.setTextSize(1);      // establece tamano de texto en 1
         oled.print("Borrado terminado");
         oled.display();
         address = 0;
         date = 1;
         contador = 0;
         evento = 1;
         a = 0;
         b = 1;
         c = 2;
         d = 3;
         e = 4;
         f = 5;
         g = 6;
         delay(3000);
         break;

         default:
         break;
       }
     }    
  }
 }

if(estadoPantallaGeneral == 0){

     menuPrincipal();
     sM1 = false;
     sM2 = false;
     sM3 = false;


   if (tecla){
   switch(tecla){
    
     case '1':
     estadoPantallaGeneral++;
     sM1 = true;
     sM2 = false;
     sM3 = false;
     break;

     case '2':
     estadoPantallaGeneral++;
     sM1 = false;
     sM2 = true;
     sM3 = false;
     break;

     case '3':
     estadoPantallaGeneral++;
     sM1 = false;
     sM2 = false;
     sM3 = true;
     break;

     default:
     break;
   }
  }
 }
 
  if(tecla){
   switch(tecla){
     case 'C':
     if (estadoPantallaGeneral == 1 || estadoPantallaGeneral == 2){
       if(estadoPantalla == 0){
        estadoPantallaGeneral--;
       }else{
         estadoPantallaGeneral--;
         estadoPantalla--;
       }
     }
     bomb = false;
     vent_lights = false;
     def = false;
     show_R = false;
     break;
   }
 }
 
 float t = dht.readTemperature();
 float h = dht.readHumidity();
 humedadSuelo=analogRead(A0);
 int valor_suel=(100.*humedadSuelo)/1024.;
 
    if(t>parametro_ventilador){
      digitalWrite(Ventilador,HIGH);
      if(x == 0){
        guardarDatos(2);
        x++;
      }
    }
    else{
       digitalWrite(Ventilador,LOW);
       x = 0;
    }
    
    if(valor_suel<=parametro_bombaMIN){
      digitalWrite(Bomba,HIGH);
      if(y == 0){
        guardarDatos(1);
        y++;
      }
    }
    else if(valor_suel>=parametro_bombaMAX){
       digitalWrite(Bomba,LOW);
       y = 0;
    }
    
    if (isnan(h) || isnan(t)) {
        Serial.println("¡No se pudo leer el sensor DHT!");
    }
    
    if(t<=parametro_LED){
      digitalWrite(LED,HIGH);
      if(z == 0){
        guardarDatos(3);
        z++;
      }
                
    }
    else{
       digitalWrite(LED,LOW);
       z = 0;
    }

    
}